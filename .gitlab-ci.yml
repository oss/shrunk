stages:
  - build
  - package
  - test
  - lint

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - frontend/.npm/
    - .cache/pip

eslint:
  stage: lint
  image: node:latest
  needs: []
  script:
    - cd frontend
    - npm ci --cache .npm --prefer-offline
    - npx eslint --format=junit src > ../eslint.xml
  artifacts:
    reports:
      junit: eslint.xml

pylint:
  stage: lint
  image: python:latest
  needs: []
  script:
    - apt-get update
    - apt-get install -y gcc libldap-common libldap2-dev libsasl2-dev
    - cd backend
    - pip3 install -r requirements-dev.txt
    - pylint --exit-zero --output-format=junit shrunk tests/*.py > pylint.xml
  artifacts:
    reports:
      junit: backend/pylint.xml

mypy:
  # stage: lint
  when: manual
  image: python:latest
  needs: []
  script:
    - cd backend
    - pip3 install -r requirements-dev.txt
    - mypy --junit-xml=./mypy.xml .
  artifacts:
    reports:
      junit: mypy.xml

flake8:
  stage: lint
  image: python:3.13
  needs: []
  script:
    - cd backend
    - pip3 install -r requirements-dev.txt
    - flake8 --format=pylint --exit-zero --format=junit-xml shrunk backend/tests > flake8.xml
  artifacts:
    reports:
      junit: backend/flake8.xml

black:
  stage: lint
  image: python:latest
  needs: []
  script:
    - cd backend
    - pip3 install black==25.1.0  # TODO: Move to ruff after updating to a newer version of Python.
    - black --check .

prettier:
  stage: lint
  image: node:latest
  needs: []
  script:
    - cd frontend
    - npm ci --cache .npm --prefer-offline
    - npx prettier --check .
  artifacts:
    reports:
      junit: eslint.xml

frontend:
  stage: build
  image: node:20
  needs: []
  script:
    - cd frontend
    - npm ci --cache .npm --prefer-offline
    - npm install
    - npm run build
  artifacts:
    paths:
      - frontend/dist/*
    expire_in: '1 day'

backend:
  stage: build
  image: python:3.6
  needs: []
  script:
    - cd backend
    - pip3 install -r requirements-build.txt
    - apt-get update
    - apt-get install -y libsasl2-dev libldap2-dev libssl-dev
    - poetry config virtualenvs.create false
    - poetry install
    - poetry build
  artifacts:
    paths:
      - backend/dist/shrunk-*.whl
    expire_in: '1 day'

package:
  stage: package
  image: alpine:latest
  needs:
    - job: frontend
    - job: backend
  script:
    - mkdir -p shrunk
    - mkdir -p shrunk/frontend
    - mkdir -p shrunk/backend
    - cp -r frontend/dist/* shrunk/frontend
    - cp -r backend/dist/* shrunk/backend
  artifacts:
    paths:
      - shrunk/
    expose_as: 'shrunk'

backend-test:
  stage: test
  image: python:3.6
  needs: [backend]
  dependencies:
    - backend
  variables:
    PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip_centos"
    CRYPTOGRAPHY_DONT_BUILD_RUST: 1
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - .cache/pip_centos
  services:
    - mongo
  script:
    - apt-get update
    - apt-get install -y libldap2-dev libsasl2-dev
    - pip3 install backend/dist/shrunk-*.whl
    - mkdir /usr/share/GeoIP
    - cp backend/GeoLite2-City.mmdb /usr/share/GeoIP/GeoLite2-City.mmdb

    - curl -fsS https://dotenvx.sh | sh
    - cp .env.example test.env

    - dotenvx set SHRUNK_DB_HOST mongo -f test.env
    - dotenvx set SHRUNK_DB_NAME shrunk_test -f test.env
    - dotenvx set SHRUNK_FLASK_TESTING 1 -f test.env
    - dotenvx set SHRUNK_GOOGLE_SAFEBROWSE_ENABLED 1 -f test.env
    - dotenvx set SHRUNK_GOOGLE_SAFEBROWSE_API_KEY "$GOOGLE_SAFE_BROWSING_API" -f test.env

    - cd backend
    - pip install pytest
    - dotenvx run -f ../test.env -- pytest --junitxml=../pytest.xml tests
  artifacts:
    reports:
      junit: pytest.xml
