/**
 * Implements the [[CreateLinkForm]] component.
 * @packageDocumentation
 */

import React from 'react';
import base32 from 'hi-base32';
import dayjs from 'dayjs';
import {
  Form,
  Input,
  Button,
  DatePicker,
  Space,
  Tooltip,
  Spin,
  Modal,
  Radio,
  RadioChangeEvent,
} from 'antd/lib';
import {
  LinkOutlined,
  MinusCircleOutlined,
  PlusOutlined,
  QuestionCircleOutlined,
} from '@ant-design/icons';
import { FormInstance } from 'antd/lib/form';
import {
  serverValidateReservedAlias,
  serverValidateDuplicateAlias,
  serverValidateLongUrl,
} from '../Validators';
import '../Base.less';
import '../modals/FixAliasRemoveButton.less';

/**
 * Displays a label with the text "Custom Alias" and a tooltip with extended help text
 * @param _props Props
 */
const CustomAliasLabel: React.FC = (props) => {
  const customAliasHelp = `
  An alias is the shortened part of the URL. For example, for
  the link 'go.rutgers.edu/abc123' the alias is 'abc123'. If you
  leave it blank, Go will automatically generate an alias for you.`;
  return (
    <Tooltip title={customAliasHelp}>
      Custom Alias <QuestionCircleOutlined />
    </Tooltip>
  );
};

/**
 * Displays a label with the text "Alias" and a tooltip with extended help text for non power users
 * @param _props Props
 */
const AliasLabel: React.FC = (_props) => {
  const aliasHelp = `
  Aliases are automatically generated by default. You can
  add a description for each alias you generate. Please note you
  may only customize your aliases as a power user. Check the FAQ
  for more info.`;
  return (
    <Tooltip title={aliasHelp}>
      Alias(es) <QuestionCircleOutlined />
    </Tooltip>
  );
};

/**
 * The final values of the create link form
 * @interface
 */
interface CreateLinkFormValues {
  /**
   * The link title
   * @property
   */
  title: string;

  /**
   * The long URL
   * @property
   */
  long_url: string;

  /**
   * The expiration time. Absent if the link has no expiration time
   * @property
   */
  expiration_time?: dayjs.Dayjs;

  /**
   * The link's aliases. The `alias` field of an array element is absent
   * if the alias should be generated randomly by the server
   * @property
   */
  aliases: { alias?: string; description: string }[];

  /**
   * Whether the link is a tracking pixel link
   * @property
   */
  is_tracking_pixel_link?: boolean;
}

/**
 * Props for the [[CreateLinkForm]] component
 * @interface
 */
export interface Props {
  /** The user's privileges. Used to determine whether the user is allowed
   * to set custom aliases
   * @property
   */
  userPrivileges: Set<string>;

  /**
   * Callback called after the user submits the form and the new link is created
   * @property
   */
  onFinish: () => Promise<void>;

  /**
   * Per request of Jack: We want a way to enable/disable the tracking pixel UI
   * by using the config in the backend. There exists an API call
   * called /api/v1/get_pixel_ui_enabled that returns a boolean value. This is temporary
   * as we roll out. This is DIFFERENT from "tracking_pixel_enabled".
   *
   * tracking_pixel_enabled is a boolean value that is set by the user through the radio buttons.
   * tracking_pixel_ui_enabled is a boolean value that is set by the backend.
   */
  tracking_pixel_ui_enabled: boolean;
}

/**
 * State for the [[CreateLinkForm]] component
 * @interface
 */
interface State {
  loading: boolean;
  tracking_pixel_enabled: boolean;
  tracking_pixel_extension: string;
}

/**
 * The [[CreateLinkForm]] component allows the user to create a new link
 * @class
 */
export class CreateLinkForm extends React.Component<Props, State> {
  formRef = React.createRef<FormInstance>();

  textBoxWidth = 200;

  constructor(props: Props) {
    super(props);
    this.state = {
      loading: false,
      tracking_pixel_enabled: false,
      tracking_pixel_extension: '.png',
    };
  }

  toggleLoading = () => {
    this.setState({ loading: true });
  };

  /**
   * Basic finishing actions when a user clicks on
   * the Shrink! button.
   */
  onSubmitClick = async (): Promise<void> => {
    this.formRef.current!.resetFields();
    await this.props.onFinish();
    this.setState({ loading: false, tracking_pixel_enabled: false });
  };

  onTrackingPixelChange = (e: RadioChangeEvent) => {
    this.setState({ tracking_pixel_enabled: e.target.value === 'pixel' });
  };

  onTrackingPixelExtensionChange = (e: RadioChangeEvent) => {
    this.setState({ tracking_pixel_extension: e.target.value });
  };

  /**
   * Executes API requests to create a new link and then calls the `onFinish` callback
   * @param values The values from the form
   */
  createLink = async (values: CreateLinkFormValues): Promise<void> => {
    this.toggleLoading();

    const createLinkReq: {
      title: string;
      long_url: string;
      expiration_time?: string;
      is_tracking_pixel_link?: boolean;
    } = {
      title: values.title,
      long_url: values.long_url,
    };

    createLinkReq.is_tracking_pixel_link = !!values.is_tracking_pixel_link;

    if (values.expiration_time !== undefined) {
      createLinkReq.expiration_time = values.expiration_time.format();
    }

    let statusOfReq = 200;
    const createLinkResp = await fetch('/api/v1/link', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(createLinkReq),
    }).then((resp) => {
      statusOfReq = resp.status;
      return resp.json();
    });

    if (statusOfReq >= 400 && statusOfReq < 500) {
      Modal.error({
        title: 'An error has ocurred',
        content: createLinkResp.errors,
      });
      this.onSubmitClick();
      return;
    }

    const linkId: string = createLinkResp.id;

    await Promise.all(
      values.aliases.map(async (alias) => {
        const createAliasReq: any = { description: alias.description };
        let result = null;
        // Check if there are duplicate aliases
        if (alias.alias !== undefined) {
          result = await fetch(
            `/api/v1/link/validate_duplicate_alias/${base32.encode(
              alias.alias!,
            )}`,
          ).then((resp) => resp.json());
        }
        if (alias.alias !== undefined && result.valid) {
          createAliasReq.alias = alias.alias;
        }
        if (this.state.tracking_pixel_enabled) {
          createAliasReq.extension = this.state.tracking_pixel_extension;
        }
        console.log(createAliasReq);
        await fetch(`/api/v1/link/${linkId}/alias`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(createAliasReq),
        });
      }),
    );

    this.onSubmitClick();
  };

  render(): React.ReactNode {
    const initialValues = { aliases: [{ description: '' }] };
    const mayUseCustomAliases =
      this.props.userPrivileges.has('power_user') ||
      this.props.userPrivileges.has('admin');
    return (
      <div className="dropdown-form">
        <Form
          ref={this.formRef}
          layout="vertical"
          initialValues={initialValues}
          onFinish={this.createLink}
        >
          <Form.Item
            label="Title"
            name="title"
            rules={[{ required: true, message: 'Please input a title.' }]}
          >
            <Input placeholder="Title" />
          </Form.Item>

          {this.props.tracking_pixel_ui_enabled && (
            <Form.Item name="is_tracking_pixel_link" valuePropName="checked">
              <Radio.Group
                onChange={this.onTrackingPixelChange}
                options={[
                  { label: 'URL', value: 'url' },
                  { label: 'Tracking Pixel', value: 'pixel' },
                ]}
                defaultValue="url"
              />
            </Form.Item>
          )}

          <Form.Item label="Expiration time" name="expiration_time">
            <DatePicker
              placeholder="Select date and time"
              style={{ width: '100%' }}
              format="YYYY-MM-DD HH:mm:ss"
              disabledDate={(current) =>
                current && current < dayjs().startOf('day')
              }
              showTime={{ defaultValue: dayjs() }}
            />
          </Form.Item>

          {!this.state.tracking_pixel_enabled && (
            <>
              <Form.Item
                label="Long URL"
                name="long_url"
                rules={[
                  { required: true, message: 'Please input a URL.' },
                  { type: 'url', message: 'Please enter a valid URL.' },
                  { validator: serverValidateLongUrl },
                ]}
              >
                <Input placeholder="Long URL" prefix={<LinkOutlined />} />
              </Form.Item>
            </>
          )}
          {this.state.tracking_pixel_enabled && (
            <>
              <Form.Item name="tracking_pixel_extension" label="Extension">
                <Radio.Group
                  onChange={this.onTrackingPixelExtensionChange}
                  options={[
                    { label: '.png', value: '.png' },
                    { label: '.gif', value: '.gif' },
                  ]}
                  defaultValue=".png"
                />
              </Form.Item>
            </>
          )}
          <Form.List name="aliases">
            {(fields, { add, remove }) => (
              <div className="fix-alias-remove-button">
                {fields.map((field, index) => (
                  <Space
                    key={field.key}
                    style={{ display: 'flex', marginBottom: 8 }}
                    align="start"
                    direction="vertical"
                    size={0}
                  >
                    {!mayUseCustomAliases ? (
                      <></>
                    ) : (
                      <div
                        style={{
                          display: 'flex',
                          flexDirection: 'row',
                          // justifyContent: 'space-between',
                          alignItems: 'start',
                          // height: '400px'
                        }}
                      >
                        <Form.Item
                          style={{
                            width: `${this.textBoxWidth}px`,
                          }}
                          label={index === 0 ? <CustomAliasLabel /> : ''}
                          name={[field.name, 'alias']}
                          fieldKey={field.fieldKey}
                          rules={[
                            {
                              min: 5,
                              message:
                                'Aliases may be no shorter than 5 characters.',
                            },
                            {
                              max: 60,
                              message:
                                'Aliases may be no longer than 60 characters.',
                            },
                            {
                              pattern: /^[a-zA-Z0-9_.,-]*$/,
                              message:
                                'Aliases may consist only of numbers, letters, and the punctuation marks “.,-_”.',
                            },
                            { validator: serverValidateReservedAlias },
                            { validator: serverValidateDuplicateAlias },
                          ]}
                        >
                          <Input placeholder="alias" />
                        </Form.Item>
                        <Button
                          disabled={fields.length === 1}
                          type="text"
                          icon={<MinusCircleOutlined />}
                          onClick={() => remove(field.name)}
                          style={{
                            marginTop: index === 0 ? '28px' : '0px',
                          }}
                        />
                      </div>
                    )}

                    <Form.Item
                      style={{
                        width: `230px`,
                        marginRight: '0px',
                      }}
                      label={
                        index === 0 ? (
                          !mayUseCustomAliases ? (
                            <AliasLabel />
                          ) : (
                            ''
                          )
                        ) : (
                          ''
                        )
                      }
                      name={[field.name, 'description']}
                      fieldKey={field.fieldKey}
                    >
                      <Input placeholder="Description" />
                    </Form.Item>
                  </Space>
                ))}
                {fields.length >= 6 ? (
                  <></>
                ) : (
                  <Form.Item>
                    <Button block type="dashed" onClick={add}>
                      <PlusOutlined /> Add another alias
                    </Button>
                  </Form.Item>
                )}
              </div>
            )}
          </Form.List>

          <Form.Item>
            <Spin spinning={this.state.loading}>
              <Button
                type="primary"
                htmlType="submit"
                style={{ width: '100%' }}
              >
                {this.state.tracking_pixel_enabled
                  ? 'Create Pixel!'
                  : 'Shrink!'}
              </Button>
            </Spin>
          </Form.Item>
        </Form>
      </div>
    );
  }
}
